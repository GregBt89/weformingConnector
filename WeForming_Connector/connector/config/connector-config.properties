# BASIC INFORMATION
edc.runtime.name=edc_connector
edc.participant.id=edc_connector

# AUTH-BASE
# see vault properties

# AUTH-TOKENBASED
# configure the API key authentication for endpoints from the EDC's management API for token-based API authentication.
# If the API key is stored in the Vault and in the configuration, the extension will take the key from the vault.
# If no API key is defined, a random value is generated and printed out into the logs.
edc.api.auth.key=providerpassword

# OAUTH2
# URL of the authorization server
edc.oauth.token.url=null
# Alias of public associated with client certificate
edc.oauth.certificate.alias=null
# Alias of private key (used to sign the token)
edc.oauth.private.key.alias=null
# Public identifier of the client
edc.oauth.client.id=null

# VAULT
# vault properties must be passed as JVM arguments

# LOGGING
edc.logprefix=LogPrefix_Provider

# JSONLD
edc.jsonld.http.enabled=true
edc.jsonld.https.enabled=true

# HTTP
web.http.port=8001
web.http.path=/api
web.http.public.port=8002
web.http.public.path=/public
# configure a separate API context for the management API
web.http.management.port=8003
web.http.management.path=/management
# connector's IDS address on which DSP endpoints are available
web.http.protocol.port=8004
web.http.protocol.path=/protocol
web.http.control.port=8005
web.http.control.path=/control

# DSP
# address at which another connector can reach your connector
# should point to your connector's IDS address. used as the callback address during the contract negotiation
edc.dsp.callback.address=http://host.docker.internal:8004/protocol

# ENDPOINT
# This property is used to define the endpoint where another connector will send the EndpointDataReference
# edc.receiver.http.endpoint=http://host.docker.internal:4100/receiver
edc.receiver.http.endpoint=http://localhost:4000/receiver/urn:connector:provider/callback

# This property is used to define the endpoint exposed by the control plane to validate the token. (required)
edc.dataplane.token.validation.endpoint=http://host.docker.internal:8005/control/token

edc.transfer.functions.enabled.protocols=http

# POSTGRES
edc.datasource.asset.name=asset
edc.datasource.asset.url=jdbc:postgresql://edc-postgres:8432/edc_store
edc.datasource.asset.user=postgres
edc.datasource.asset.password=postgres
edc.datasource.policy.name=policy
edc.datasource.policy.url=jdbc:postgresql://edc-postgres:8432/edc_store
edc.datasource.policy.user=postgres
edc.datasource.policy.password=postgres
edc.datasource.contractdefinition.name=contractdefinition
edc.datasource.contractdefinition.url=jdbc:postgresql://edc-postgres:8432/edc_store
edc.datasource.contractdefinition.user=postgres
edc.datasource.contractdefinition.password=postgres
edc.datasource.contractnegotiation.name=contractnegotiation
edc.datasource.contractnegotiation.url=jdbc:postgresql://edc-postgres:8432/edc_store
edc.datasource.contractnegotiation.user=postgres
edc.datasource.contractnegotiation.password=postgres
edc.datasource.transferprocess.name=transferprocess
edc.datasource.transferprocess.url=jdbc:postgresql://edc-postgres:8432/edc_store
edc.datasource.transferprocess.user=postgres
edc.datasource.transferprocess.password=postgres